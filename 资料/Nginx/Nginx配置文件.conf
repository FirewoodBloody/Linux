#运行用户
user nobody;

worker_processes  1;        #启动进程,通常设置成和cpu的数量相等

worker_rlimit_nofile 65535; #指定单进程打开文件数，需与系统设定一致 

#全局错误日志及PID文件
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

#工作模式及连接数上限
events {
    #epoll是多路复用IO(I/O Multiplexing)中的一种方式,
    #仅用于linux2.6以上内核,可以大大提高nginx的性能
    use   epoll; 

    #单个后台worker process进程的最大并发链接数    
    worker_connections  1024;

    # 并发总数是 worker_processes 和 worker_connections 的乘积
    # 即 max_clients = worker_processes * worker_connections
    # 在设置了反向代理的情况下，max_clients = worker_processes * worker_connections / 4  为什么
    # 为什么上面反向代理要除以4，应该说是一个经验值
    # 根据以上条件，正常情况下的Nginx Server可以应付的最大连接数为：4 * 8000 = 32000
    # worker_connections 值的设置跟物理内存大小有关
    # 因为并发受IO约束，max_clients的值须小于系统可以打开的最大文件数
    # 而系统可以打开的最大文件数和内存大小成正比，一般1GB内存的机器上可以打开的文件数大约是10万左右
    # 我们来看看360M内存的VPS可以打开的文件句柄数是多少：
    # $ cat /proc/sys/fs/file-max
    # 输出 34336
    # 32000 < 34336，即并发连接总数小于系统可以打开的文件句柄总数，这样就在操作系统可以承受的范围之内
    # 所以，worker_connections 的值需根据 worker_processes 进程数目和系统可以打开的最大文件总数进行适当地进行设置
    # 使得并发总数小于操作系统可以打开的最大文件数目
    # 其实质也就是根据主机的物理CPU和内存进行配置
    # 当然，理论上的并发总数可能会和实际有所偏差，因为主机还有其他的工作进程需要消耗系统资源。
    # ulimit -SHn 65535

}
	//##部署支持4层TCP/UDP代理的Nginx服务器---------------------编译安装必须要使用--with-stream参数开启4层代理模块。
stream {
	
	upstream backend {
		server 192.168.2.100:22;			   //后端SSH服务器的IP和端口
		server 192.168.2.200:22;
	}
	
	server {
		listen 12345;			//Nginx监听的端口
		proxy_pass backend;
	}
}

http {
    
    include    mime.types;				//#设定mime类型,类型由mime.type文件定义#指定配置文件所包含的文件  
    default_type  application/octet-stream;
    #指定默认类型为二进制流，也就是当文件类型未定义时使用这种方式，例如在没有配置PHP环境时，Nginx是不予解析的，此时，用浏览器访问PHP文件就会出现下载窗口
    #设定日志格式
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，
    #对于普通应用，必须设为 on,
    #如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，
    #以平衡磁盘与网络I/O处理速度，降低系统的uptime.
    sendfile     on;  #开启高效传输模式
    #tcp_nopush     on;
     #tcp_nodelay    on;   # tcp_nopush，tcp_nodelay设置on,防止网络阻塞  

    #连接超时时间
    #keepalive_timeout  0;
    keepalive_timeout  65;
    tcp_nodelay     on;

    gzip  on; #开启gzip压缩，实时压缩输出数据流  
  
    gzip_min_length  1k; #设置允许压缩的页面最小字节数  
  
    gzip_buffers    4  16k; #指定内存空间来存贮压缩结果，这里指定4个单位为16k的内存来存储压缩结果，即总大小为64k  
  
    gzip_http_version  1.1; #指定识别HTTP协议版本，默认是1.1  
  
    gzip_comp_level  2; #指定gzip压缩比，1 压缩比最小，处理速度最快；9 压缩比最大，传输速度快，但处理最慢，也比较消耗CPU资源  
  
    gzip_types  text/plain application/x-javascript text/css application/xml; #指定压缩的类型，无论是否指定，“text/html”类型总是会被压缩  
  
    gzip_vary  on; #该选项开启可以让前端的缓存服务器缓存经过gzip压缩的页面，例如，用Varnish缓存经过Nginx压缩的数据  
  
    #设定请求缓冲
    client_header_buffer_size    128k;		 //默认请求包头信息的缓存
    large_client_header_buffers  4 128k;		//大请求包头部信息的缓存个数与容量
    client_header_timeout  10; #指定客户端请求头读取超时时间，如果超过这个时间，客户端还没有发送任何数据，Nginx将返回“Request time out（408）”错误  
    client_body_timeout  10; #指定客户端请求主体读取超时时间，如果超过这个时间���客户端还没有发送任何数据，Nginx将返回“Request time out（408）”错误  
  
    send_timeout        10; #指定响应客户端的超时时间。这个超时仅限于两个连接活动之间的时间，如果超过这个时间，客户端没有任何活动，Nginx将会关闭连接  

    server_tokens off;   #隐藏Nginx版本号 
	
	#配置Nginx服务器，添加服务器池，实现反向代理功能 //配置upstream服务器集群池属性
    upstream webserver {
		ip_hash;
                server 192.168.2.100 weight=1 max_fails=1 fail_timeout=10;	//max_fails设置后台服务器的失败次数	//weight后台服务器的权重
                server 192.168.2.200 weight=2 max_fails=2 fail_timeout=10;	//fail_timeout后台服务器的失败超时时间。
	}

    #设定虚拟主机配置
    server {
        #侦听80端口
        listen    80;
        #定义使用 www.nginx.cn访问
        server_name  www.nginx.cn;

      charset utf-8;   #指定Nginx默认的字符集，只有utf-8支持中文字符  

        #定义服务器的默认网站根目录位置
        root html;

	 auth_basic "Input Password:";                        //用户认证提示符
       auth_basic_user_file "/usr/local/nginx/pass";        //认证密码文件

        #设定本虚拟主机的访问日志
        access_log  logs/nginx.access.log  main;

	rewrite ^/ http://www.tmooc.cn/;		//访问192.168.4.5的请求重定向至www.tmooc.cn

	rewrite ^/(.*) http://www.tmooc.cn/$1;	//访问192.168.4.5/下面子页面，重定向至www.tmooc.cn/下相同的页面

        #默认请求
        location / {

            #定义首页索引文件的名称
            index index.php index.html index.htm;   

            index  index.html index.htm; #设定默认首页  
  
            root /tom/webapps/ROOT; #指定网页根目录 
		proxy_pass http://webserver; #反向代理
		rewrite /a.html  /b.html;  //访问a.html重定向到b.htm  'redirect'访问a.html重定向到b.html（跳转地址栏）
        }

	if ($http_user_agent ~* firefox) {            //识别客户端firefox浏览器
	rewrite ^(.*)$ /firefox/$1 break;
	}		#实现curl和火狐访问相同链接返回的页面不同

        # 定义错误提示页面
        error_page   500 502 503 504 /50x.html;
        location = /50x.html {
        }

        error_page   404 /40x.html;		//自定义错误页面

        #静态文件，nginx自己处理
        location ~ ^/(images|javascript|js|css|flash|media|static)/ {

            #过期30天，静态文件不怎么更新，过期可以设大一点，
            #如果频繁更新，则可以设置得小一点。
            expires 30d;	//定义对静态页面的缓存时间（//定义客户端缓存时间为30天）
        }

        #PHP 脚本请求全部转发到 FastCGI处理. 使用FastCGI默认配置.
        location ~ .php$ {
            fastcgi_pass 127.0.0.1:9000;
            fastcgi_index index.php;
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include fastcgi.conf;
        }

        #禁止访问 .htxxx 文件
            location ~ /.ht {
            deny all;
        }

    }

  	#SSL虚拟主机-----------//openssl genrsa > cert.key  //生成私钥  ---------------------------------//openssl req -new -x509 -key cert.key > cert.pem //生成证书
    server {
        listen       443 ssl;
        server_name  www.rx.com;

        ssl_certificate      cert.pem;
        ssl_certificate_key  cert.key;

        ssl_session_cache    shared:SSL:1m;
       ssl_session_timeout  5m;

        ssl_ciphers  HIGH:!aNULL:!MD5;
        ssl_prefer_server_ciphers  on;

        location / {
            root  www;
            index  index.html index.htm;
        }
    }

}
