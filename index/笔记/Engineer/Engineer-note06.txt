#############################################################################
本地班级下载笔记方法:
# firefox ftp://172.40.50.118/course/ENGINEER/   //根据需要有选择下载
远程班级下载笔记方法:
使用浏览器直接访问https://github.com/redhatedu/course
或者
# yum -y install git
# git clone https://github.com/redhatedu/course        //完整下载(第一次使用必须操作)
# cd course
# git pull                                             //更新下载(必须在course目录下执行)
# git checkout 文件名                                  //下载某一个文件(必须在course目录下执行)
#############################################################################

今日主题：HTTP网站

web服务器【把某个目录共享】放网页文件.html
网站基于B/S设计（浏览器/服务器）
在服务器上共享的文件都是：HTML
软件包是:httpd
在server上操作：


#firewall-cmd --set-default-zone=trusted
# yum -y install httpd
//Apache基金会的httpd软件
# systemctl start httpd
//默认共享了/var/www/html/目录
# cd /var/www/html/
# ls
# vim index.html
<html>
<head>
<title>Hello world</title>
</head>
<body>
<h1> HeHe</h1>
<h2> Hehe</h2>
<font color=red>约吗</font>
</body>
</html>

++++++++++++++++++++++++++++++++++
httpd的配置文件:
/etc/httpd/conf/httpd.conf      主配置文件
/etc/httpd/conf.d/   					 目录

#vim /etc/httpd/conf/httpd.conf
//改文件仅需要查看即可
Listen 80			
//服务器监听的端口
DocumentRoot "/var/www/html"
//网站的根路径在哪里，也就是页面存放的位置
DirectoryIndex index.html
//默认的首页叫什么名字
#ServerName www.example.com:80
//服务器的域名是什么
IncludeOptional conf.d/*.conf
//加载conf.d目录下的所有配置文件

+++++++++++++++++++++++++++++++++++++++
实验（虚拟主机）
一台服务器，安装一个httpd，做了一个网站（浪费）
一台服务器，安装一个httpd，做n个网站
虚拟主机类型：
		基于IP地址（要求服务器有多个IP）
		基于域名（要求卖多个域名)
		基于端口

#ping server0.example.com
#ping www0.example.com
#ping webapp0.example.com


在server0主机创建基于域名的虚拟主机
域名使用server0.example.com和www0.example.com
# vim /etc/httpd/conf.d/server.conf
//该文件不存在，需要手动创建
<VirtualHost *:80>
    ServerName server0.example.com
		DocumentRoot /var/www/html
</VirtualHost>


# vim /etc/httpd/conf.d/www.conf
//该文件不存在，需要手动创建
<VirtualHost *:80>
    ServerName www0.example.com
		DocumentRoot /var/www/dachui
</VirtualHost>
# mkdir /var/www/dachui
# vim /var/www/dachui/index.html
大腿打退大腿
# systemctl  restart httpd
在desktop上操作:
#curl http://server0.example.com
//打开的是之前实验创建的第1个页面
#curl http://www0.example.com
//打开的是刚刚创建的第2个页面


+++++++++++++++++++++++++++++++++++
网页的目录结构
#cd /var/www/html/
#vim index.html
hello world
#vim test.html
nb is nb
#mkdir haha
#echo "xixi" > haha/index.html
dekstop客户端访问：
firefox http://server0.example.com
firefox http://server0.example.com/test.html
firefox http://server0.example.com/haha/


+++++++++++++++++++++++++++++++++
网站的目录结构（ACL访问控制）
ACL的语法格式如下：
<Directory 目录的绝对路径>
Require all denied|granted
Require ip IP或网段地址 .. ..
</Directory>

在server上操作：
#mkdir /var/www/html/jpg/
#find / -name "*.jpg"
#把找的图片，复制一份到/var/www/html/jpg/a.jpg
#firefox http://server0.example.com/jpg/a.jpg

#vim /etc/httpd/conf.d/server.conf
... ...
<Directory "/var/www/html/jpg">
Require ip 172.25.254.250 172.25.0.250
</Directory>
//设置访问控制#ifconfig |grep 172.25
//仅允许172.25.0.250和172.25.254.250访问图片
#systemctl restart httpd

验证结果（不同的电脑访问网站的图片，结果不一样）
#firefox http://server0.example.com/jpg/a.jpg

++++++++++++++++++++++++++++++++++++++
SELinux（安全）

一般系统安全都是通过账户权限
美国国家安全局（SELinux），内置到Linux内核
SELinux控制每个软件能否读写某些资料

SELinux有安全上下文件
# ls -Z
//会发现每个文件或目录都有一个标签
//这个标签控制了哪些程序能读什么表取

如：SELinux设置规则说
httpd这个软件，只能读写有httpd_sys_content_t

备注：在计算机中mv移动文件，权限会被保留
          在计算机中cp拷贝文件，权限不会保留
在server主机操作：
# cd /root/
# echo "nb" > nb.html
# ls -Z  nb.html
# mv nb.html  /var/www/html/
客户端访问：
#firefox http://server0.example.com/nb.html
//因为SELinux的标签不对，所有无法访问

在server主机(chcon命令可以修改上下文标签)
# chcon -R -t 标签内容   文件或目录名
# chcon -R -t httpd_sys_content_t /var/www/html/nb.html

#firefox http://server0.example.com/nb.html
//修改标签后，再次访问就可以成功

# setenforce 0   	//关闭SELinux
# setenforce 1   	//开启SELinux
以后检查错误可能性：
	1.防火墙
	2.权限rwx不对
	3.SElinux标签不对
	4.配置文件，没启动服务

+++++++++++++++++++++++++++++++++
静态页面：html、mp3、flv、jpg、gif等都是静态
动态页面：需要被服务器的解释器解释的页面
				java,php,python,shell
动态页面是需要解释器解释的！！！！
httpd这个软件本身不能解释java,php,python代码

在server0操作（延续之前的实验，要求已经安装了httpd)
#yum -y install mod_wsgi
(mod_wsgi该软件可以让httpd与python交互)
//当用户要访问一个python脚本时，httpd可以把页面脚本给python执行一遍，然后把执行的结果给用户)
									 mod_wsgi
client<---->httpd<----------->python
用户请求a.py,httpd就把a.py交给python执行
python执行完会把结果给httpd，httpd把结果给用户

做第3个虚拟主机（这个网站是基于python动态网站）
要求：域名使用webapp0.example.com
		  端口使用8909
# yum -y install mod_wsgi
#vim /etc/httpd/conf.d/webapp.conf
Listen 8909
//开启一个端口
<VirtualHost *:8909>  //使用前面开启的端口
   ServerName   webapp0.example.com
	 DocumentRoot /var/www/webapp
   WSGIScriptAlias /  /var/www/webapp/webinfo.wsgi
//当你访问网站的根时，等同于访问/var/www/webapp/webinfo.wsgi脚本文件
</VirtualHost>
# mkdir /var/www/webapp/
# cd /var/www/webapp/
# wget http://classroom/pub/materials/webinfo.wsgi
# systemctl restart httpd
//重启失败，提示执行journalctl -xn
//Selinux还控制谁能用什么端口
//默认允许httpd使用80，443
# semanage port -a -t http_port_t -p tcp 8909
//使用selinux管理器命令修改端口配置
//-a是添加一台规则
//-t是指定http能使用什么端口
//-p允许httpd使用tcp的8090端口

客户端访问:
firefox http://webapp0.example.com:8908


SELinux[
提前写好规则
	什么软件能读取什么标签的文件或目录
	什么软件能使用什么端口
]越安全，越麻烦



