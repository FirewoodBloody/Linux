循环
for循环(固定次数的循环，循环次数取决于循环列表)
	for循环采用遍历式、列表式的执行流程，通过指定变量从值列表中循环赋值，每次复制后执行固定的一组操作。
	for循环语法格式：
		for  变量名  in  值列表 //（循环列表，循环的次数）
		do
   		     命令序列
		done

		for  变量名  in  `ls /etc/*.conf` //（应用命令执行结果参与循环）
		do
		    命令序列
		done
		
		for  变量名  in  {1..5}  //（循环数字序列）
		do
    			命令序列
		done

		for  变量名  in  `seq 5` //（循环数字序列）  //seq命令： seq 5   1到5
		do							   seq 5 10   5到10	
		    命令序列						    seq 2 2 10 从2开始每隔2个显示到10  2 4 6 8 10
		done


while循环
	while循环属于条件式的执行流程，会反复判断指定的测试条件，只要条件成立即执行固定的一组操作，直到条件变化为不成立为止。所以while循环的条件一般通过变量来进行控制，在循环体内对变量值做相应改变，以便在适当的时候退出，避免陷入死循环。
	while循环的语法结构：
				while  条件测试  //条件判断
				do
				    命令序列
				done

				while ：	  //永久死循环
				do
				    命令序列
				done

case 条件判断-简单的 if
	case 分支属于匹配执行的方式，它针对指定的变量预先设置一个可能的取值，判断该变量的实际取值是否与预设的某一个值相匹配，如果匹配上了，就执行相应的一组操作，如果没有任何值能够匹配，就执行预先设置的默认操作。
	case 语法格式：
		case  变量值  in
		模式1)
    			命令序列1 ;;
		模式2)
 			   命令序列2 ;;
  		  .. ..
		*)		
  		  默认命令序列
		esac

函数：在 Shell 脚本中，将一些需重复使用的操作，定义为公共的语句块，即可称为函数。通过使用函数，可以使脚本代码更加简洁，增强易读性，提高Shell脚本的执行效率
	函数的定义方法：
		格式1：
			function  函数名 {
			    命令序列
			    .. ..
			}
		格式2：
			函数名() {
    			命令序列
 			   .. ..
			}

	函数的调用
		直接使用“函数名”的形式调用，如果该函数能够处理位置参数，则可以使用“函数名 参数1 参数2 .. ..”的形式调用
		注意：函数的定义语句必须出现在调用之前，否则无法执行。
		
		颜色输出的命令: echo -e "\033[32mOK\033[0m"。
		3X为字体颜色，4X为背景颜色。	0X样式。
		字背景颜色范围:40----49 
			40:黑 
			41:深红 
			42:绿 
			43:黄色 
			44:蓝色 
			45:紫色 
			46:深绿 
			47:白色 

		字颜色:30-----------39 
			30:黑 
			31:红 
			32:绿 
			33:黄 
			34:蓝色 
			35:紫色 
			36:深绿 
			37:白色
				\33[0m 关闭所有属性 
				\33[1m 设置高亮度 
				\33[4m 下划线 
				\33[5m 闪烁 
				\33[7m 反显 
				\33[8m 消隐 
				\33[30m -- \33[37m 设置前景色 
				\33[40m -- \33[47m 设置背景色 
				\33[nA 光标上移n行 
				\33[nB 光标下移n行 
				\33[nC 光标右移n行 
				\33[nD 光标左移n行 
				\33[y;xH设置光标位置 
				\33[2J 清屏 
				\33[K 清除从光标到行尾的内容 
				\33[s 保存光标位置 
				\33[u 恢复光标位置 
				\33[?25l 隐藏光标 
				\33[?25h 显示光标 
		
		fork 炸弹
				_____________________________________
				|	.(){		.变量名				|
				|	.|.&		&放入后台				|
				|	}							|
				|	.		调用.函数				|
				——————————————————————————————

Shell脚本的中断及推出
	通过break、continue、exit在Shell脚本中实现中断与退出的功能。
	break可以结束整个循环；continue结束本次循环，进入下一次循环；exit结束整个脚本，
			#!/bin/bash
			for  i   in   {1..5}
			do
			       [  $i  -eq  3 ]&& break //这里将break替换为continue，exit分别测试脚本执行效果       echo $i
			done
			 echo "Game Over"		






