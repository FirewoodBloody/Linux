字符串截取及切割
	获取字符串长度		
		string="abcd"
		echo ${#string} #输出 4

	子串截取的三种用法：				
		${变量名:起始位置:长度}
			//使用${}方式截取字符串时，起始位置是从0开始的（和数组下标编号类似） 。使用${}截取时，起始位置可以省略，省略时从第一个字符开始截。
		expr substr "$变量名" 起始位置 长度  
			//使用expr substr截取字符串时，起始编号从1开始，这个要注意与${}相区分。
		echo $var | cut -b 起始位置-结束位置    ( 第N位，第N位。。。)
			//选项 -b 表示按字节截取字符，其中起始位置、结束位置都可以省略。当省略起始位置时，视为从第1个字符开始（编号也是从1开始，与expr类似），当省略结束位置时，
			视为截取到最后。

	路径分割：
		取目录位置：dirname "字符串"
		取文档的基本名称：basename "字符串"

	子串替换的两种用法：
		只替换第一个匹配结果：
			${变量名/匹配字符（替换字符）/新字符}
		替换全部匹配结果：
			${变量名//匹配字符（替换字符）/新字符}

	字符串掐头去尾：
		从左向右，最短匹配删除（#）：
			格式：${变量名#*关键词}	//删除从左侧第1个字符到最近的关键词“：”的部分，* 作通配符理解
								#[root@svr5 ~]# echo ${A#*:}
								#x:0:0:root:/root:/bin/bash
		从左向右，最长匹配删除（##）：
			格式：${变量名##*关键词}	//删除从左侧第1个字符到最远的关键词“:”的部分
								#[root@svr5 ~]# echo $A                      //确认变量A的值
								#root:x:0:0:root:/root:/bin/bash
								#[root@svr5 ~]# echo ${A##*:}
								#/bin/bash
		从右向左，最短匹配删除（%）：
			格式：${变量名%关键词*}	//删除从右侧最后1个字符到往左最近的关键词“:”的部分，* 做通配符理解
								#[root@svr5 ~]# echo ${A%:*}
								#root:x:0:0:root:/root
		从右向左，最长匹配删除（%%）：
			格式：${变量名%%关键词*}	//删除从右侧最后1个字符到往左最远的关键词“:”的部分
								#[root@svr5 ~]# echo ${A%%:*}
								#root

字符串初值的处理
	通过${var:-word}判断变量是否存在，决定是否给变量赋初始值
		//若变量var已存在且非Null，则返回 $var 的值；否则返回字串“word”，原变量var的值不受影响
		变量值已存在的情况：
			#[root@svr5 ~]# XX=11
			#[root@svr5 ~]# echo $XX              //查看原变量值
			#11
			#[root@svr5 ~]# echo ${XX:-Tarena}      //因XX已存在，输出变量XX的值
			#11
		变量值不存在的情况：
			#[root@svr5 ~]# echo ${YY:-Tarena}      //因YY不存在，输出“Tarena”
			#Tarena

数组（一个变量可以储存多个变量值）
	赋值：	a=(11 22 33)
		a[0]=11
	提取： echo ${a[0]}
		echo ${a[*]}	//显示数组的全部值
	获取数组长度的方法与获取字符串长度的方法相同，例如：
				# 取得数组元素的个数
				length=${#array_name[@]}
				# 或者
				length=${#array_name[*]}
				# 取得数组单个元素的长度
				lengthn=${#array_name[n]}

	
expect预期交互	//自动交互软件
	//xpect可以为交互式过程（比如FTP、SSH等登录过程）自动输送预先准备的文本或指令，而无需人工干预。触发的依据是预期会出现的特征提示文本。
	常见的expect指令：
		定义环境变量：set 变量名 变量值
		创建交互式进程：spawn 交互式命令行
		触发预期交互：expect "预期会出现的文本关键词:" { send "发送的文本\r" }
		在spawn建立的进程中允许交互指令：interact
			#!/bin/bash
			host=192.168.4.5
			expect << EOF						//expect 自动交互工具
			spawn ssh root@$host                          	//spawn  创建ssh连接
			expect "password:" { send "123456\r" }           	//expect 在这里相当于眼睛	send 在这里相当于手
			expect "#"  { send "pwd > /tmp/$user.txt \r" }  	//脚本中的 "# 以及 password " 在这里是眼睛寻找查看的东西
			expect "#"  { send "exit\r" }				//当眼睛寻找到关键字符时  send开始输入

正则表达式
	//计算机的通用表达式，用特殊符号表示的一种形式
	基本正则列表
		^		//匹配行首
		$		//匹配行尾
		[ ]		//集合，匹配集合中的任意单个字符
		[^]		//对集合区反
		.		//匹配任意单个字符
		*		//匹配前一个字符任意次数（*不允许单独使用）
		.*		//匹配所有
		\{n,m\}	//匹配前一个字符n到m次
		\{n\}		//匹配前一个字符n次
		\{n,\}	//匹配前一个字符n次以上
		\(\)		//保留
	
	扩展正则列表
		+		//最少匹配一次
		?		//最多匹配一次
		{n,m}		//匹配n到m次
		()		//组合为整体，保留
		|		//或者
		\b		//单词边界


